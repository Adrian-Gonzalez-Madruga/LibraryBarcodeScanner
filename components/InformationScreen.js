import React from 'react';
import {ScrollView, View, Text, Button, Image, StyleSheet} from 'react-native';
import { createAppContainer, createStackNavigator, StackActions, NavigationActions } from 'react-navigation';
import * as firebase from 'firebase';
import PushNotifications from 'react-native-push-notification';

PushNotifications.configure({
  onRegister: function(token) {
    console.log( 'TOKEN:', token );
},
  onNotification: function(notification) {},
  popInitialNotification: true,
  requestPermissions: true,

});



/*PushNotifications.localNotification({
  id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  ticker: "Library", // (optional)
  autoCancel: true, // (optional) default: true
  largeIcon: "", // (optional) default: "ic_launcher"
  smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
  bigText: "Checked Out", // (optional) default: "message" prop
  subText: this.state.mainText, // (optional) default: none
  color: "black", // (optional) default: system default
  tag: 'Booking Complete', // (optional) add tag to message
  group: "group", // (optional) add group to message
  priority: "high", // (optional) set notification priority, default: high
  visibility: "private", // (optional) set notification visibility, default: private
  importance: "high", // (optional) set notification importance, default: high

  title: "Library Notification", // (optional)
  message: "Book Sucessfully Checked", // (required)
  playSound: false, // (optional) default: true
  soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
});

onNotification = (notification)=>{
  
PushNotification.cancelLocalNotifications({id: '0'});
}*/

export class InformationScreen extends React.Component {
    constructor() {
        super();
        this.state = {mainText: "Loading...", subText: "", imageSrc: "https://ak6.picdn.net/shutterstock/videos/7512106/thumb/1.jpg", btnTitle: "Waiting", errors: "\n"};
        this.goHome = this.goHome.bind(this);
        this.checkOut = this.checkOut.bind(this);
        this.timeCounter = this.timeCounter.bind(this);
        this.stock = 0;
        this.counter = 0;
        this.isChecked = false;
    }

    componentDidMount() {
        fetch('https://barcode-6ceab.firebaseio.com/Books/' + this.props.navigation.getParam("barcodeNum", 0) + '.json')
            .then((response) => response.json())
            .then((responseJson) => {
            if(responseJson === null) {
                this.setState({mainText: "\nCould not Access Book", subText: "\nScan Again or Bring to Librarian", errors: "Book Not Found\n", imageSrc: "https://banner2.kisspng.com/20180402/kzw/kisspng-red-x-letter-computer-icons-red-x-5ac2fb7587dc52.5179004815227277975565.jpg"});
            } else {
                this.stock = responseJson.Stock;
                this.setState((prevState) => ({mainText: responseJson.Name, subText: ("\nAuthor:\n " + responseJson.Author + "\n\nISBN:\n " + responseJson.ISBN + "\n\nPublisher:\n " + responseJson.Publisher + "\n\nStock:\n " + responseJson.Stock), imageSrc: responseJson.Image, errors: (responseJson.Stock <= 0 ? "Book Out Of Stock\n" : prevState.errors)}));
            }
            this.timeCounter();
        }).catch((error) => {
            this.setState({btnTitle: "Home", btnFunc: this.goHome, mainText: "Could Not Connect", subText: "Please Connect To Wifi", imageSrc: "https://banner2.kisspng.com/20180402/kzw/kisspng-red-x-letter-computer-icons-red-x-5ac2fb7587dc52.5179004815227277975565.jpg"});
        });
        fetch("https://barcode-6ceab.firebaseio.com/users/" + firebase.auth().currentUser.uid + "/books/" + this.props.navigation.getParam("barcodeNum", 0) + ".json" )
            .then((response) => response.json())
            .then((responseJson) => {
            if(responseJson != null) {
                this.isChecked = true;
                this.setState({errors: "Book Already Checked Out\n"});
            }
            this.timeCounter()
        }).catch((error) => {
            this.setState({btnTitle: "Home", btnFunc: this.goHome, mainText: "Could Not Connect", subText: "Please Connect To Wifi", imageSrc: "https://banner2.kisspng.com/20180402/kzw/kisspng-red-x-letter-computer-icons-red-x-5ac2fb7587dc52.5179004815227277975565.jpg"});
        });
}

    timeCounter() {
        if(this.counter++ === 1) {
            this.setState({btnTitle: ((this.isChecked || this.stock <= 0) ? "Home" : "Check Out"), btnFunc: ((this.isChecked || this.stock <= 0) ? this.goHome : this.checkOut)});
        }
    }

    goHome() {
        this.props.navigation.dispatch(StackActions.reset({index: 0,actions: [NavigationActions.navigate({ routeName: 'Home' })],}));
    }

    checkOut() {
        var bcn = this.props.navigation.getParam("barcodeNum", 0);
        var futureDate = new Date(Date.now() + 12096e5);
        var months = ["January", "Febuary", "March", "April", "May", "June", "July", "August", "Spetember", "October", "November", "December"];
        var dateString = (months[futureDate.getMonth()] + " " + futureDate.getDate() + ", 20" + (futureDate.getYear() % 100) + " " + futureDate.getHours() + ":" + futureDate.getMinutes() + ":" + futureDate.getSeconds());
        fetch("https://barcode-6ceab.firebaseio.com/users/" + firebase.auth().currentUser.uid +"/books/" + bcn + ".json" ,{
            method: "PUT", body: JSON.stringify({Name: this.state.mainText, Date: dateString})
        });
        this.stock -= 1;
        fetch('https://barcode-6ceab.firebaseio.com/Books/' + this.props.navigation.getParam("barcodeNum", 0) + '/Stock.json',{
            method: "PUT", body: JSON.stringify(this.stock)
        }).catch((error) => {
            console.error(error);
        });
        this.props.navigation.dispatch(StackActions.reset({index: 0,actions: [NavigationActions.navigate({ routeName: 'Home' })],}));
        PushNotifications.localNotificationSchedule({
            //... You can use all the options from localNotifications
            id: '1',
            ticker: "Library",
            bigText: "Checked Out", // (optional) default: "message" prop
            subText: this.state.mainText, // (optional) default: none
            color: "black",
            tag: 'Booking Complete',
            title: "Library Notification",
            message: "Checked Out Book", // (required)
            date: new Date(Date.now() + (1 * 1000)) // in 60 secs
        });
        PushNotifications.localNotificationSchedule({
            //... You can use all the options from localNotifications
            id: '2',
            ticker: "Library",
            bigText: "Overdue", // (optional) default: "message" prop
            subText: this.state.mainText, // (optional) default: none
            color: "red",
            tag: 'Book is Overdue',
            title: "Library Notification",
            message: "Checked Out Book", // (required)
            date: new Date(Date.now() + 12096e5) // in 60 secs
        });
    }

    static navigationOptions = ({ navigation }) => {
        return {
          headerTitle: "Checkout",
          headerRight: (
            <View style={{margin: 10}}>
              <Button
                onPress={() => {firebase.auth().signOut();}}
                title="Logout"
              />
            </View>
          ),
        };
      };

    render() {
      return (
        <ScrollView style={styles.scroll} keyboardDismissMode='on-drag'>
            <View style={styles.container}>
            <Text style={styles.introText}>{this.state.mainText}</Text>
            <Image style={{width: 175, height: 300}} source={{uri: this.state.imageSrc}}/>
            <Text>{this.state.subText}</Text> 
            <Text style={styles.error}>{this.state.errors}</Text>
            <View style={styles.button}>
                <Button title={this.state.btnTitle} onPress={this.state.btnFunc}/>
            </View>
            </View>
        </ScrollView>
        );
    }  
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingVertical:0,
    },
    container: {
        flex: 1,
        alignItems: 'center',
        margin: 15
    },
    introText: {
        fontSize: 30,
        margin: 20
    },
    button: {
        fontSize: 60,
        padding: 30,
        width:200
    },
    error: {
        color: "red"
    }
});